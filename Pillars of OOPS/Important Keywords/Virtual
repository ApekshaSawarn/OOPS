In C++, the virtual keyword is used to create a virtual function.
Virtual function- A virtual function is the member function of the class. This function is declared in the parent class and overridden by the child class.

Importance of a virtual function
Irrespective of the nature of the reference (or the pointer) that is used for a function call, virtual functions make sure that the right function is called for an object.
Runtime polymorphism is achieved by the virtual function.

Syntax
virtual returntype functionName(/*No of parameters*/)
{
  // body of function
}

The rules for the virtual functions in C++ are as follows:
--> Virtual functions cannot be static.
--> A virtual function can be a friend function of another class.
--> Virtual functions should be accessed using a pointer or reference of base class type to achieve runtime polymorphism.
--> The prototype of virtual functions should be the same in the base as well as the derived class.
--> They are always defined in the base class and overridden in a derived class. It is not mandatory for the derived class to override (or re-define the virtual function),
in that case, the base class version of the function is used.
--> A class may have a virtual destructor but it cannot have a virtual constructor.

Limitations of Virtual Functions
--> Slower: The function call takes slightly longer due to the virtual mechanism and makes it more difficult for the compiler to optimize because it does not know exactly
which function is going to be called at compile time.
--> Difficult to Debug: In a complex system, virtual functions can make it a little more difficult to figure out where a function is being called from.
