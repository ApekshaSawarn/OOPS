Destructor is an instance member function that is invoked automatically whenever an object is going to be destroyed. Meaning, a destructor is the last function that is going to
be called before an object is destroyed. Destructor has the same name as their class name preceded by a tilde (~) symbol. It is not possible to define more than one destructor. 
Destructor neither requires any argument nor returns any value. It is automatically called when an object goes out of scope. Destructor release memory space occupied by the
objects created by the constructor. In destructor, objects are destroyed in the reverse of an object creation.

The syntax for defining the destructor within the class:
~ <class-name>() {
    // some instructions
}
The syntax for defining the destructor outside the class:
<class-name> :: ~<class-name>() {
    // some instructions
}

A destructor function is called automatically when the object goes out of scope:
--> the function ends 
--> the program ends 
--> a block containing local variables ends 
--> a delete operator is called  

How to call destructors explicitly? 
object_name.~class_name()

When do we need to write a user-defined destructor?
If we do not write our own destructor in class, the compiler creates a default destructor for us. The default destructor works fine unless we have dynamically allocated
memory or pointer in class. When a class contains a pointer to memory allocated in the class, we should write a destructor to release memory before the class instance is
destroyed. This must be done to avoid memory leaks.

1) Private Destructor in C++
Destructors with the access modifier as private are known as Private Destructors. Whenever we want to prevent the destruction of an object, we can make the destructor private.
Eg- 
class Test {
private:
    ~Test() {}
};
int main() {}
The above program compiles and runs fine. Hence, we can say that: It is not a compiler error to create private destructors. 
 
class Test {
private:
    ~Test() {}
};
int main() { Test t; }
Output- error The above program fails in the compilation. The compiler notices that the local variable ‘t’ cannot be destructed because the destructor is private. 

class Test {
private:
    ~Test() {}
};
int main() { Test* t; }
The above program works fine. There is no object being constructed, the program just creates a pointer of type “Test *”, so nothing is destructed.

2) Virtual Destructor
Virtual destructors are useful when you might potentially delete an instance of a derived class through a pointer to base class:

class Base 
{
    // some virtual methods
};

class Derived : public Base
{
    ~Derived()
    {
        // Do some important cleanup
    }
};
Here, you'll notice that I didn't declare Base's destructor to be virtual. Now, let's have a look at the following snippet:

Base *b = new Derived();
// use b
delete b; // Here's the problem!
Since Base's destructor is not virtual and b is a Base* pointing to a Derived object, delete b has undefined behaviour:

[In delete b], if the static type of the object to be deleted is different from its dynamic type, the static type shall be a base class of the dynamic type of the object
to be deleted and the static type shall have a virtual destructor or the behavior is undefined.

In most implementations, the call to the destructor will be resolved like any non-virtual code, meaning that the destructor of the base class will be called but not the one
of the derived class, resulting in a resources leak.

To sum up, always make base classes' destructors virtual when they're meant to be manipulated polymorphically.

If you want to prevent the deletion of an instance through a base class pointer, you can make the base class destructor protected and nonvirtual; by doing so, the compiler
won't let you call delete on a base class pointer.


How are destructors different from a normal member function?
Destructors are different from normal member functions as they don’t take any argument and don’t return anything. Also, destructors have the same name as their class and
their name is preceded by a tilde(~).

Why a class has only one destructor?
A destructor doesn't have parameters, so there can be only one. 

When do we need to write user-define destructors?
In object-oriented programming, a user-defined destructor (also known as a custom destructor) is written to define specific cleanup actions that need to be performed when an
object of a class goes out of scope or is explicitly deleted. While C++ provides default destructors that handle basic cleanup, there are situations where you might want to
write your own destructor to manage resources, memory, or other operations specific to your class.
Here are some scenarios where you might need to write a user-defined destructor:
--> Dynamic Memory Management: If your class allocates memory dynamically using new or malloc, it's important to write a destructor that releases that memory using delete or
free. Failing to release dynamically allocated memory can lead to memory leaks.
--> Resource Cleanup: If your class uses external resources such as file handles, network connections, or database connections, a destructor can be used to close and release
these resources properly.

